{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","_jsx","className","concat","mode","children","_jsxs","Link","to","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","_Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","About","myStyle","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","Router","document","body","Date","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"mOAIe,SAASA,EAAOC,GAC3B,OAEIC,aADA,CACA,OAAKC,UAAS,kCAAAC,OAAoCH,EAAMI,KAAI,QAAAD,OAAOH,EAAMI,MAAOC,SAG5EC,eAAA,OAAKJ,UAAU,kBAAiBG,SAAA,CAC5BJ,cAACM,IAAI,CAACL,UAAU,eAAeM,GAAG,IAAGH,SAAEL,EAAMS,QAG7CR,cAAA,UAAQC,UAAU,iBAAiBQ,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAAmBL,SAC3MJ,cAAA,QAAMC,UAAU,0BAEpBI,eAAA,OAAKJ,UAAU,2BAA2BS,GAAG,yBAAwBN,SAAA,CACjEC,eAAA,MAAIJ,UAAU,kCAAiCG,SAAA,CAC3CJ,cAAA,MAAIC,UAAU,WAAUG,SACpBJ,cAACM,IAAI,CAACL,UAAU,WAAW,eAAa,OAAOM,GAAG,IAAGH,SAAC,WAE1DJ,cAAA,MAAIC,UAAU,WAAUG,SACpBJ,cAACM,IAAI,CAACL,UAAU,WAAWM,GAAG,SAAQH,SAAEL,EAAMY,iBAGtDN,eAAA,OAAKJ,UAAS,+BAAAC,OAA8C,UAAbH,EAAMI,KAAe,OAAO,SAAUC,SAAA,CACjFJ,cAAA,SAAOC,UAAU,mBAAmBW,QAASb,EAAMc,WAAYJ,KAAK,WAAWC,GAAG,2BAElFV,cAAA,SAAOC,UAAU,mBAAmBa,QAAQ,yBAAwBV,SAAC,+BC1B9E,SAASW,EAAShB,GAC7B,IAoCAiB,EAAwBC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAOpB,OACIb,eAAAiB,WAAA,CAAAlB,SAAA,CAEAC,eAAA,OAAKJ,UAAU,YAAYsB,MAAO,CAACC,MAAoB,SAAbzB,EAAMI,KAAc,QAAQ,WAAWC,SAAA,CAE7EJ,cAAA,MAAIC,UAAU,OAAMG,SAAEL,EAAM0B,UAC5BzB,cAAA,OAAKC,UAAU,OAAMG,SACrBJ,cAAA,YAAUC,UAAU,eAAeyB,MAAON,EAAMO,SAhCjC,SAACC,GAEpBP,EAAQO,EAAMC,OAAOH,QA8ByDH,MAAO,CAACO,gBAA8B,SAAb/B,EAAMI,KAAc,UAAU,QAASqB,MAAoB,SAAbzB,EAAMI,KAAc,QAAQ,WAAYO,GAAG,QAAQqB,KAAK,QAIzM/B,cAAA,UAAQgC,SAAwB,IAAdZ,EAAKa,OAAYhC,UAAU,4BAA4BW,QAtD3D,WAClB,IAAIsB,EAAUd,EAAKe,cACnBd,EAAQa,GACRnC,EAAMqC,UAAU,0BAA2B,YAmDyDhC,SAAC,yBACjGJ,cAAA,UAAQgC,SAAwB,IAAdZ,EAAKa,OAAYhC,UAAU,4BAA4BW,QAjD3D,WAClB,IAAIsB,EAAUd,EAAKiB,cACnBhB,EAAQa,GACRnC,EAAMqC,UAAU,0BAA2B,YA8CyDhC,SAAC,yBACjGJ,cAAA,UAAQgC,SAAwB,IAAdZ,EAAKa,OAAYhC,UAAU,4BAA4BW,QA5CxD,WAErBS,EADc,IAEdtB,EAAMqC,UAAU,gBAAiB,YAyCsEhC,SAAC,eACpGJ,cAAA,UAAQgC,SAAwB,IAAdZ,EAAKa,OAAYhC,UAAU,4BAA4BW,QAhC9D,WACf0B,UAAUC,UAAUC,UAAUpB,GAC9BrB,EAAMqC,UAAU,uBAAwB,YA8ByDhC,SAAC,cAC9FJ,cAAA,UAAQgC,SAAwB,IAAdZ,EAAKa,OAAYhC,UAAU,4BAA4BW,QA5BvD,WACtB,IAAIsB,EAAUd,EAAKqB,MAAM,QACzBpB,EAAQa,EAAQQ,KAAK,MACrB3C,EAAMqC,UAAU,wBAAyB,YAyB+DhC,SAAC,2BAGzGC,eAAA,OAAKJ,UAAU,iBAAiBsB,MAAO,CAACC,MAAoB,SAAbzB,EAAMI,KAAc,QAAQ,WAAWC,SAAA,CAClFJ,cAAA,MAAAI,SAAI,sBACJC,eAAA,KAAAD,SAAA,CAAIgB,EAAKqB,MAAM,OAAOE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQX,UAAaA,OAAO,cAAYb,EAAKa,OAAO,iBACpG5B,eAAA,KAAAD,SAAA,CAAI,KAASgB,EAAKqB,MAAM,OAAOE,QAAO,SAACC,GAAW,OAAwB,IAAjBA,EAAQX,UAAaA,OAAO,mBACrFjC,cAAA,MAAAI,SAAI,YACJJ,cAAA,KAAAI,SAAIgB,EAAKa,OAAO,EAAEb,EAAK,8BCpEpB,SAASyB,EAAM9C,GAM1B,IAAI+C,EAAU,CACVtB,MAAqB,SAAdzB,EAAMI,KAAe,QAAQ,UACpC2B,gBAA+B,SAAd/B,EAAMI,KAAe,iBAAiB,SAG3D,OACIE,eAAA,OAAKJ,UAAU,YAAWG,SAAA,CACtBJ,cAAA,MAAIC,UAAU,OAAOsB,MAAO,CAACC,MAAqB,SAAdzB,EAAMI,KAAe,QAAQ,WAAWC,SAAC,aAC7EC,eAAA,OAAKJ,UAAU,YAAYS,GAAG,mBAAkBN,SAAA,CAC5CC,eAAA,OAAKJ,UAAU,iBAAgBG,SAAA,CAC3BJ,cAAA,MAAIC,UAAU,mBAAmBS,GAAG,aAAYN,SAChDJ,cAAA,UAAQC,UAAU,mBAAmBQ,KAAK,SAASc,MAAOuB,EAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAAa1C,SAC3KJ,cAAA,UAAAI,SAAQ,2BAGRJ,cAAA,OAAKU,GAAG,cAAcT,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAAmBG,SAClIJ,cAAA,OAAKC,UAAU,iBAAiBsB,MAAOuB,EAAQ1C,SAAC,uHAMpDC,eAAA,OAAKJ,UAAU,iBAAgBG,SAAA,CAC3BJ,cAAA,MAAIC,UAAU,mBAAmBS,GAAG,aAAYN,SAChDJ,cAAA,UAAQC,UAAU,6BAA6BsB,MAAOuB,EAASrC,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAaL,SACtLJ,cAAA,UAAAI,SAAQ,qBAGRJ,cAAA,OAAKU,GAAG,cAAcT,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAAmBG,SAC7HJ,cAAA,OAAKC,UAAU,iBAAiBsB,MAAOuB,EAAQ1C,SAAC,6PAKpDC,eAAA,OAAKJ,UAAU,iBAAgBG,SAAA,CAC3BJ,cAAA,MAAIC,UAAU,mBAAmBS,GAAG,eAAcN,SAClDJ,cAAA,UAAQC,UAAU,6BAA6BsB,MAAOuB,EAASrC,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAAeL,SAC1LJ,cAAA,UAAAI,SAAQ,4BAGRJ,cAAA,OAAKU,GAAG,gBAAgBT,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAAmBG,SACjIJ,cAAA,OAAKC,UAAU,iBAAiBsB,MAAOuB,EAAQ1C,SAAC,iOFPpEN,EAAOiD,aAAe,CAClBvC,MAAO,iBACPG,UAAW,SG3BAqC,MAff,SAAejD,GAKX,OACIC,cAAA,OAAKuB,MAAO,CAAC0B,OAAQ,QAAQ7C,SAE5BL,EAAMmD,OAAS7C,eAAA,OAAKJ,UAAS,eAAAC,OAAiBH,EAAMmD,MAAMzC,KAAI,gCAAgC0C,KAAK,QAAO/C,SAAA,CACxGJ,cAAA,UAAAI,SARY,SAACgD,GAChB,IAAMC,EAAQD,EAAKf,cACnB,OAAOgB,EAAMC,OAAO,GAAGnB,cAAgBkB,EAAME,MAAM,GAMvCC,CAAWzD,EAAMmD,MAAMzC,QAAe,KAAGV,EAAMmD,MAAMO,U,OC0D1DC,MAxDf,WACE,IAAA1C,EAAwBC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAAlCb,EAAIe,EAAA,GAAEyC,EAAOzC,EAAA,GACpB0C,EAA0B3C,mBAAS,MAAK4C,EAAA1C,YAAAyC,EAAA,GAAjCV,EAAKW,EAAA,GAAEC,EAAQD,EAAA,GAEhBzB,EAAY,SAAC2B,EAAStD,GACxBqD,EAAS,CACPL,IAAKM,EACLtD,KAAMA,IAERuD,YAAW,WACPF,EAAS,QACV,OAiBP,OACE9D,cAAAsB,WAAA,CAAAlB,SACAC,eAAC4D,IAAM,CAAA7D,SAAA,CAGPJ,cAACF,EAAM,CAACU,MAAM,aAAaL,KAAMA,EAAMU,WAnBtB,WACL,UAATV,GACDwD,EAAQ,QACRO,SAASC,KAAK5C,MAAMO,gBAAkB,UACtCM,EAAU,6BAA8B,aAIxCuB,EAAQ,SACRO,SAASC,KAAK5C,MAAMO,gBAAkB,QACtCM,EAAU,8BAA+B,cASyB,IAAIgC,MAExEpE,cAACgD,EAAK,CAACE,MAAOA,IACdlD,cAAA,OAAKC,UAAU,iBAAgBG,SAG/BC,eAACgE,IAAM,CAAAjE,SAAA,CAGDJ,cAACsE,IAAK,CAACC,OAAK,EAACC,KAAK,SAAQpE,SAExBJ,cAAC6C,EAAK,CAAC1C,KAAMA,MAEfH,cAACsE,IAAK,CAACC,OAAK,EAACC,KAAK,IAAGpE,SACnBJ,cAACe,EAAQ,CAACqB,UAAWA,EAAWX,QAAQ,wEAAwEtB,KAAMA,iBChDnHsE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,OCDdS,IAASC,OACPpF,cAACqF,IAAMC,WAAU,CAAAlF,SACfJ,cAAC0D,EAAG,MAENQ,SAASqB,eAAe,SAM1Bd,M","file":"static/js/main.b7570893.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'        // PropTypes are used to define the definition of the props used\nimport { Link } from 'react-router-dom';  // used in router to navigate between pages without loading\n\nexport default function Navbar(props) {\n    return (\n        // props cannot be changed i.e. props are read only.\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            {/* {} is template literal and its used when we want to write javascript */}\n            {/* $ specifies that we can use variable here */}\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                {/* Now instead of link and to we will use a and href then it will work but page will reload */}\n                {/* This props.title is rendered from the app.js navbar calling component */}\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                        </li>\n                    </ul>\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        {/* This is the toggle button ans When on click event is envoked then the toggle mode function of the app.js in called */}\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}      //This defines the definition of the props used in our component\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };   //This is used when nothing is passed as props","import React, {useState} from 'react'\n// useState is a hook\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLoClick = ()=>{ \n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n\n    const handleClearClick = ()=>{ \n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleOnChange = (event)=>{\n        // event: this we get when there is any change in textarea\n        setText(event.target.value) \n        // setText is used here because when we type on textarea then value of that textarea is changed but that value is assigned to text so as to change the value of textarea we have to change the value of text\n    }\n\n    \n    const handleCopy = () => {\n        navigator.clipboard.writeText(text); \n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);  // If there is  space then it will be removed\n        setText(newText.join(\" \"));  // This will join words with one space between them\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    const [text, setText] = useState(''); \n    //Note this is used inside the functional component and not outside it\n    //setText will be used as updation function to change the value of text.\n    // useState('') gives the default value to text.\n    // In the class based version of react we use \"this\" keyword to change the state but in functional based component we use hooks\n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>  \n        {/* <> This arrow is used because we should wrap everything inside our jsx as we can return only one thing from our jsx */}\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \n        {/* {} specifies that we are using javascript */}\n            <h1 className='mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\"> \n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n            {/* value specifies what will be contained inside text area */}\n            {/* we will have to listen for onChange event in order to write something on textarea otherwise we will not be able to write in textarea */}\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n            {/*disabled to use to make the buttons disable.In this when text length is 0 then buttons will be disabled*/}\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nexport default function About(props) {\n\n    // const [myStyle, setMyStyle] = useState({\n    //     color: 'black',\n    //     backgroundColor: 'white'\n    // }) \n    let myStyle = {    //This is javascript object.Now the idea of dark mode is to make this object a state and we can furthur control it using hooks i.e., when dark mode button is clicked then this style will be changed\n        color: props.mode ==='dark'?'white':'#042743',\n        backgroundColor: props.mode ==='dark'?'rgb(36 74 104)':'white', \n    }\n    \n    return (\n        <div className=\"container\">\n            <h1 className=\"my-3\" style={{color: props.mode ==='dark'?'white':'#042743'}}>About Us</h1>\n            <div className=\"accordion\" id=\"accordionExample\">\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                    <strong>Analyze Your text </strong>\n                    </button>\n                    </h2>\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                    <div className=\"accordion-body\" style={myStyle}>\n                    Text-Tools gives you a way to analyze your text quickly and efficiently. Be it word count, character count or \n\n                    </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                    <strong>Free to use </strong>\n                    </button>\n                    </h2>\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                    <div className=\"accordion-body\" style={myStyle}>\n                    Text-Tools is a free character counter tool that provides instant character count & word count statistics for a given text. Text-Tools reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\n                    </div>\n                    </div>\n                </div>\n                <div className=\"accordion-item\">\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                    <strong>Browser Compatible </strong>\n                    </button>\n                    </h2>\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                    <div className=\"accordion-body\" style={myStyle}>\n                    This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\n\n                    </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height: '50px'}}>\n        {/* props.alert && :- It is used to handle the case when the initial value of alert is null then it will be evalautes to false so in that case <div> will not be executed and if we do not apply the first condition then if alert is passed as null then it will show error when used inside the div.*/}\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n \nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not and we have implemented the control of dark mode in app.js in order to control dark mode by simply passing the props in the respective component.\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{   //Used to handle the alert message.Paramter message means which message we want to display and type parameter denotes the type of alert\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);   // We have used timeout because we do not want the alert mesaage to remain permanently on screen so we will use setTimeout to make the alert null after 1500 ms\n  }   // Now we can pass this function in the components where we want to show alert.\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");  // shows alert when dark mode is enabled\n      //Now we can also set the title of our page to something else when dark mode is enabled using document.title=\"\";\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      \n    }\n  }\n  return (\n    <>\n    <Router> \n    {/* We have to enclose everything in our router tab as a part of syntax */}\n    {/* for using react router we will first install package of router using npm install react router dom */}\n    <Navbar title=\"Text-Tools\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n    {/* We are using title=\"Text-Tools\" to pass title as props in our navbar components */}\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n      {/* Container is a class of bootstrap that gives good look to our div.By default it makes center allignment the components that are used inside that div */}\n      {/* my-3 gives margin in y */}\n    <Switch>\n    {/* /users --> Component 1\n        /users/home --> Component 2 */}\n          <Route exact path=\"/about\">\n            {/* exact word is used for exact matching and its recommended to use exact paths for navigating */}\n            <About mode={mode} />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Try Text-Tools:  word counter, character counter, remove extra spaces\" mode={mode}/>\n          </Route>\n    </Switch>\n    </div>\n    </Router>\n    </> \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}